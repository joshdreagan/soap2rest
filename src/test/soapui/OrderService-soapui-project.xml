<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="5452c4b8-9440-4ffc-87af-0e4734d0944c" activeEnvironment="Default" name="OrderService" resourceRoot="${projectDir}" soapui-version="5.3.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="2c1583b8-3005-4f49-bd50-27683c8d68db" wsaVersion="NONE" name="OrderServiceSoapBinding" type="wsdl" bindingName="{http://camel.apache.org/examples/soap2rest}OrderServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/cxf/soap/OrderService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/cxf/soap/OrderService?wsdl"><con:part><con:url>http://localhost:8080/cxf/soap/OrderService?wsdl</con:url><con:content><![CDATA[<definitions name="OrderService" targetNamespace="http://camel.apache.org/examples/soap2rest" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://camel.apache.org/examples/soap2rest" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://camel.apache.org/examples/soap2rest" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://camel.apache.org/examples/soap2rest">
      <xs:element name="placeOrder" type="PlaceOrderRequestType"/>
      <xs:complexType name="PlaceOrderRequestType">
        <xs:sequence>
          <xs:element name="customer" type="CustomerType"/>
          <xs:element name="item" type="ItemType"/>
          <xs:element name="quantity" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CustomerType">
        <xs:sequence>
          <xs:element name="firstName" type="xs:string"/>
          <xs:element name="lastName" type="xs:string"/>
          <xs:element name="address" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ItemType">
        <xs:sequence>
          <xs:element name="upc" type="xs:string"/>
          <xs:element name="description" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="placeOrderResponse" type="PlaceOrderResponseType"/>
      <xs:complexType name="PlaceOrderResponseType">
        <xs:sequence>
          <xs:element name="orderNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </types>
  <message name="placeOrderResponse">
    <part element="tns:placeOrderResponse" name="parameters"></part>
  </message>
  <message name="placeOrder">
    <part element="tns:placeOrder" name="parameters"></part>
  </message>
  <portType name="Order">
    <operation name="placeOrder">
      <input message="tns:placeOrder" name="placeOrder"></input>
      <output message="tns:placeOrderResponse" name="placeOrderResponse"></output>
    </operation>
  </portType>
  <binding name="OrderServiceSoapBinding" type="tns:Order">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="placeOrder">
      <soap:operation soapAction="" style="document"/>
      <input name="placeOrder">
        <soap:body use="literal"/>
      </input>
      <output name="placeOrderResponse">
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="OrderService">
    <port binding="tns:OrderServiceSoapBinding" name="OrderPort">
      <soap:address location="http://localhost:8080/cxf/soap/OrderService"/>
    </port>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8080/cxf/soap/OrderService</con:endpoint></con:endpoints><con:operation id="d2fbc8ee-5793-40d9-9818-d743664b6feb" isOneWay="false" action="" name="placeOrder" bindingOperationName="placeOrder" type="Request-Response" outputName="placeOrderResponse" inputName="placeOrder" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e4a33eaa-737d-4cf3-b8b2-8e84b9056116" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/cxf/soap/OrderService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap="http://camel.apache.org/examples/soap2rest">
   <soapenv:Header/>
   <soapenv:Body>
      <soap:placeOrder>
	    <soap:customerId>12345</soap:customerId>
         <soap:itemId>67890</soap:itemId>
         <soap:quantity>2</soap:quantity>
      </soap:placeOrder>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://camel.apache.org/examples/soap2rest/Order/placeOrder"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="7446b1d0-0c54-421b-a2d6-2f3f4cfd1688" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://192.168.0.10:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://192.168.0.10:8080</con:endpoint></con:endpoints><con:resource name="Orders" path="/nodejs/rest/orders" id="ea7d8c23-b032-4524-8a7a-5712f8b3a57f"><con:settings/><con:parameters/><con:method name="Orders 1" id="8d5bddcf-034b-440a-9624-60af53db534c" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>400 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ord="http://192.168.0.10/nodejs/rest/orders">ord:Response</con:element></con:representation><con:request name="Request 1" id="6d404e7b-eef9-409e-94bb-53e59f80ec89" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://192.168.0.10:8080</con:endpoint><con:request>{ "placeOrder": { "customer": { "customerId": 12345, "firstName": "Cosmo", "lastName": "Kramer", "address": "" }, "item": { "itemId": 67890, "name": "Shower Head", "description": "High pressure shower head for elephants." }, "quantity": 2 } }</con:request><con:originalUri>http://192.168.0.10/nodejs/rest/orders</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:restMockService id="deadfe1c-ba8e-427c-853d-f98861922bb9" port="9090" path="/soapui/rest" host="0.0.0.0" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info(mockRequest.getRequestContent())</con:onRequestScript><con:restMockAction name="/orders" method="POST" resourcePath="/orders" id="222b8c75-f411-4d25-8d9d-89b544ba8ba1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="cab58f13-4aa5-4bd1-bc57-cb3c0198079b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"orderNumber": "12345"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>